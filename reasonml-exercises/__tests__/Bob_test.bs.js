// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Bob = require("../src/Bob.bs.js");
var Char = require("bs-platform/lib/js/char.js");
var Jest = require("@glennsl/bs-jest/src/jest.bs.js");
var Random = require("bs-platform/lib/js/random.js");
var $$String = require("bs-platform/lib/js/string.js");

function character(cstart, cend) {
  return Char.chr(Random.$$int(cend - cstart | 0) + cstart | 0);
}

function anyCharacter(param) {
  return character(32, 126);
}

function uppercaseCharacter(param) {
  return character(65, 90);
}

function uppercaseGibberish(length) {
  return $$String.init(length, (function (param) {
                return character(65, 90);
              }));
}

function gibberishQuestion(length) {
  return $$String.init(length, (function (param) {
                return character(32, 126);
              })) + "?";
}

Jest.describe("Bob", (function (param) {
        Jest.test("stating something", (function (param) {
                return Jest.Expect.toEqual("Whatever.", Jest.Expect.expect(Bob.hey("Tom-ay-to, tom-aaaah-to.")));
              }));
        Jest.test("shouting", (function (param) {
                return Jest.Expect.toEqual("Whoa, chill out!", Jest.Expect.expect(Bob.hey("WATCH OUT!")));
              }));
        Jest.test("shouting gibberish", (function (param) {
                return Jest.Expect.toEqual("Whoa, chill out!", Jest.Expect.expect(Bob.hey($$String.init(10, (function (param) {
                                          return character(65, 90);
                                        })))));
              }));
        Jest.test("asking a question", (function (param) {
                return Jest.Expect.toEqual("Sure.", Jest.Expect.expect(Bob.hey("Does this cryogenic chamber make me look fat?")));
              }));
        Jest.test("asking a numeric question", (function (param) {
                return Jest.Expect.toEqual("Sure.", Jest.Expect.expect(Bob.hey("You are, what, like 15?")));
              }));
        Jest.test("asking gibberish", (function (param) {
                return Jest.Expect.toEqual("Sure.", Jest.Expect.expect(Bob.hey(gibberishQuestion(20))));
              }));
        Jest.test("talking forcefully", (function (param) {
                return Jest.Expect.toEqual("Whatever.", Jest.Expect.expect(Bob.hey("Let's go make out behind the gym!")));
              }));
        Jest.test("using acronyms in regular speech", (function (param) {
                return Jest.Expect.toEqual("Whatever.", Jest.Expect.expect(Bob.hey("It's OK if you don't want to go to the DMV.")));
              }));
        Jest.test("forceful question", (function (param) {
                return Jest.Expect.toEqual("Calm down, I know what I'm doing!", Jest.Expect.expect(Bob.hey("WHAT THE HELL WERE YOU THINKING?")));
              }));
        Jest.test("shouting numbers", (function (param) {
                return Jest.Expect.toEqual("Whoa, chill out!", Jest.Expect.expect(Bob.hey("1, 2, 3 GO!")));
              }));
        Jest.test("no letters", (function (param) {
                return Jest.Expect.toEqual("Whatever.", Jest.Expect.expect(Bob.hey("1, 2, 3")));
              }));
        Jest.test("question with no letters", (function (param) {
                return Jest.Expect.toEqual("Sure.", Jest.Expect.expect(Bob.hey("4?")));
              }));
        Jest.test("shouting with special characters", (function (param) {
                return Jest.Expect.toEqual("Whoa, chill out!", Jest.Expect.expect(Bob.hey("ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!")));
              }));
        Jest.test("shouting with no exclamation mark", (function (param) {
                return Jest.Expect.toEqual("Whoa, chill out!", Jest.Expect.expect(Bob.hey("I HATE YOU")));
              }));
        Jest.test("statement containing question mark", (function (param) {
                return Jest.Expect.toEqual("Whatever.", Jest.Expect.expect(Bob.hey("Ending with a ? means a question.")));
              }));
        Jest.test("non-letters with question", (function (param) {
                return Jest.Expect.toEqual("Sure.", Jest.Expect.expect(Bob.hey(":) ?")));
              }));
        Jest.test("prattling on", (function (param) {
                return Jest.Expect.toEqual("Sure.", Jest.Expect.expect(Bob.hey("Wait! Hang on.  Are you going to be OK?")));
              }));
        Jest.test("silence", (function (param) {
                return Jest.Expect.toEqual("Fine. Be that way!", Jest.Expect.expect(Bob.hey("")));
              }));
        Jest.test("prolonged silence", (function (param) {
                return Jest.Expect.toEqual("Fine. Be that way!", Jest.Expect.expect(Bob.hey("   ")));
              }));
        Jest.test("alternate silence", (function (param) {
                return Jest.Expect.toEqual("Fine. Be that way!", Jest.Expect.expect(Bob.hey("\t\t\t\t\t\t\t\t\t\t")));
              }));
        Jest.test("on multiple line question", (function (param) {
                return Jest.Expect.toEqual("Whatever.", Jest.Expect.expect(Bob.hey("\nDoes this cryogenic chamber make me look fat?\nno")));
              }));
        Jest.test("starting with whitespace", (function (param) {
                return Jest.Expect.toEqual("Whatever.", Jest.Expect.expect(Bob.hey("         hmmmmmmm...")));
              }));
        Jest.test("ending with whitepace", (function (param) {
                return Jest.Expect.toEqual("Sure.", Jest.Expect.expect(Bob.hey("Okay if like press my  spacebar  quite a bit?   ")));
              }));
        Jest.test("other whitespace", (function (param) {
                return Jest.Expect.toEqual("Fine. Be that way!", Jest.Expect.expect(Bob.hey("\n\r \t")));
              }));
        return Jest.test("non-question ending with whitespace", (function (param) {
                      return Jest.Expect.toEqual("Whatever.", Jest.Expect.expect(Bob.hey("This is a statement ending with whitespace      ")));
                    }));
      }));

exports.character = character;
exports.anyCharacter = anyCharacter;
exports.uppercaseCharacter = uppercaseCharacter;
exports.uppercaseGibberish = uppercaseGibberish;
exports.gibberishQuestion = gibberishQuestion;
/*  Not a pure module */
